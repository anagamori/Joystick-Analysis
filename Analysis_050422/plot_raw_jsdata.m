%% plot_raw_jsdata.m
%--------------------------------------------------------------------------
% Author: Akira Nagamori
% Last update: 6/24/22
% Descriptions:
%   - Create js_struct from jstruct generated by pre-processing code
%   - Each entry of js_struct is each trial defined by trial trigger
%       Trial trigger = successful hold in the home position + 
%                       radial position passed reach_threshold
%--------------------------------------------------------------------------
%%

close all
clear all
clc

data_folder = 'F:\JoystickExpts\data\';
mouse_ID = 'Box_4_AN663';
data_ID = '072922_63_79_010_0070_130_031_000_180_000_180_000';
condition_array = strsplit(data_ID,'_');
hold_threshold = str2double(condition_array{7})/100*6.35;
outer_threshold = str2double(condition_array{2})/100*6.35;
max_distance = str2double(condition_array{3})/100*6.35;
hold_duration = str2double(condition_array{6});
trial_duration = str2double(condition_array{5});
angle_min = str2double(condition_array{8});
angle_max = str2double(condition_array{9});
reach_threshold = 31/100*6.35;
theta = 0:0.01:2*pi;

cd([data_folder mouse_ID '\' data_ID])
load('jstruct')
cd('C:\Users\anaga\Documents\GitHub\Joystick-Analysis\Analysis_050422')

%%
plotOpt = 1;

nTrial = length(jstruct);
max_radial_position = []; %zeros(1,length(js_reward));
peak_vel = [];

Fs = 1000;

[b,a] = butter(10,100/(Fs/2),'low');

index_reward = [];
time_reward = [];
n_reward = 0;
index_validTrial = [];

buffer_length = 0.5*Fs;
recording_length = 0.5*Fs;
reward_count = 0;
trial_count = 1;
trial_onset_all = [];
for i = 1:nTrial
    if ~isempty(jstruct(i).trial_on)
        js_r_contact = zeros(1,length(jstruct(i).traj_x));
        js_l_contact = zeros(1,length(jstruct(i).traj_x));
        js_tial_live = zeros(1,length(jstruct(i).traj_x));
        reward = zeros(1,length(jstruct(i).traj_x));
        for j = 1:size(jstruct(i).js_pairs_r,1)
            js_r_contact(jstruct(i).js_pairs_r(j,1):jstruct(i).js_pairs_r(j,2)) = 1;
        end
        for k = 1:size(jstruct(i).js_pairs_l,1)
            js_l_contact(jstruct(i).js_pairs_l(k,1):jstruct(i).js_pairs_l(k,2)) = 1;
        end
        for l = 1:size(jstruct(i).trial_live,1)
            js_tial_live(jstruct(i).trial_live(l,1):jstruct(i).trial_live(l,2)) = 1;
        end
        reward(jstruct(i).reward_onset) = 1;
        time = [1:length(jstruct(i).traj_x)]./Fs;
        x =  jstruct(i).traj_x/100*6.35; %filtfilt(b,a,jstruct(i).traj_x/100*6.35);
        y = jstruct(i).traj_y/100*6.35; %filtfilt(b,a,jstruct(i).traj_y/100*6.35);
        x_filt = filtfilt(b,a,jstruct(i).traj_x/100*6.35);
        y_filt = filtfilt(b,a,jstruct(i).traj_y/100*6.35);
        vel_x = gradient(x_filt)*Fs; %[0 diff(traj_x)*Fs];
        acc_x = gradient(vel_x)*Fs; %[0 diff(vel_x)*Fs];
        vel_y = gradient(y_filt)*Fs;
        acc_y = gradient(vel_y)*Fs;
        radial_pos = sqrt(x.^2+y.^2);
        RoC = (vel_x.^2 + vel_y.^2).^(3/2)./abs(vel_x.*acc_y-vel_y.*acc_x);
        mag_vel = sqrt(vel_x.^2+vel_y.^2);
        
        angle_js = atan2d(y,x);
        angle_js = angle_js + (angle_js < 0)*360;
        %
        
        trial_onset = jstruct(i).trial_on(:,2);
        trial_onset_binary = zeros(1,length(jstruct(i).traj_x));
        trial_onset_binary(trial_onset) = 1;
        
        trial_onset_all = [trial_onset_all;trial_onset];
        % define hold periods
        hold_binary = zeros(1,length(jstruct(i).traj_x));
        hold_binary(radial_pos<hold_threshold) = 1;
        hold_diff = [0 diff(hold_binary)];
        hold_onset = find(hold_diff ==1);
        if hold_binary(1) == 1
            hold_onset = [1 hold_onset];
        end        
        hold_offset = find(hold_diff ==-1);     
        hold_offset(hold_offset<hold_duration) = []; % remove hold offset happening right after the recording started 
        
        %% Find hold offset that occurred right before the trial onset 
        index_hold_offset = zeros(1,length(trial_onset));
        index_hold_onset = zeros(1,length(trial_onset));
        for m = 1:length(trial_onset)
            hold_offset_temp = hold_offset;
            hold_offset_temp(hold_offset_temp>trial_onset(m)) = [];
            index_hold_offset(m) = hold_offset_temp(end);
            hold_onset_temp = hold_onset;
            hold_onset_temp(hold_onset_temp>index_hold_offset(m)) = [];
            index_hold_onset(m) = hold_onset_temp(end);
        end
        
        %%
        hold_binary_successful = zeros(1,length(jstruct(i).traj_x));
        hold_binary_successful(index_hold_offset) = 1;
        
        figure()
        plot(x,y,'color',[45 49 66]/255)
        hold on
        plot(hold_threshold*cos(theta),hold_threshold*sin(theta),'--','color','k')
        plot(outer_threshold*cos(theta),outer_threshold*sin(theta),'--','color','k')
        plot(max_distance*cos(theta),max_distance*sin(theta),'--','color','k')
        plot([0 7*cos(deg2rad(angle_min))],[0 7*sin(deg2rad(angle_min))],'color','m')
        plot([0 7*cos(deg2rad(angle_max))],[0 7*sin(deg2rad(angle_max))],'color','m')
        xlim([-8 8])
        ylim([-8 8])
        set(gca,'TickDir','out')
        set(gca,'box','off')
        xlabel('ML (mm)')
        ylabel('AP (mm)')
        axis equal
        
        figure()
        ax1 = subplot(6,1,1);
        plot(time,radial_pos,'LineWidth',2,'color',[45 49 66]/255)
        hold on
        yline(hold_threshold,'--','color','k','LineWidth',2)
        yline(outer_threshold,'--','color','k','LineWidth',2)
        yline(max_distance,'--','color','k','LineWidth',2)       
        for n = 1:size(jstruct(i).trial_live,1)
            plot(time(jstruct(i).trial_live(n,1):jstruct(i).trial_live(n,2)),radial_pos(jstruct(i).trial_live(n,1):jstruct(i).trial_live(n,2)),'LineWidth',2,'color',[204 45 53]/255)
        end
        for n = 1:length(index_hold_onset)
            plot(time(index_hold_onset(n):index_hold_offset(n)),radial_pos(index_hold_onset(n):index_hold_offset(n)),'LineWidth',2,'color',[225 218 174]/255)
        end
        ax2 = subplot(6,1,2);
        plot(time,angle_js,'LineWidth',2,'color',[45 49 66]/255)
        hold on
        yline(angle_min,'--','color','k','LineWidth',1)
        yline(angle_max,'--','color','k','LineWidth',1)
        ax3 = subplot(6,1,3);
        plot(time,js_r_contact,'LineWidth',2,'color',[45 49 66]/255)
        ylim([-0.05 1.05])
        ax4 = subplot(6,1,4);
        plot(time,js_l_contact,'LineWidth',2,'color',[45 49 66]/255)
        ylim([-0.05 1.05])
        ax5 = subplot(6,1,5);
        plot(time,trial_onset_binary,'LineWidth',2,'color',[45 49 66]/255)
        hold on
        plot(time,hold_binary_successful,'LineWidth',2,'color',[204 45 53]/255)
        ylim([-0.05 1.05])
        %     hold on
        %     yline(angle_min,'--','LineWidth',2,'color',[45 49 66]/255)
        %     yline(angle_max,'--','LineWidth',2,'color',[45 49 66]/255)
        %ylim([-0.05 1.05])
        ax6 = subplot(6,1,6);
        plot(time,reward,'LineWidth',2,'color',[45 49 66]/255)
        ylim([-0.05 1.05])
        linkaxes([ax1 ax2 ax3 ax4 ax5 ax6],'x')
        
        
        for n = 1:length(trial_onset)
            hold_duration_trial = index_hold_offset(n)-index_hold_onset(n);
            if trial_onset(n)-buffer_length < 0
                js_reach(trial_count).x_traj = x(1:trial_onset(n)+recording_length-1);
                js_reach(trial_count).y_traj = y(1:trial_onset(n)+recording_length-1);
                js_reach(trial_count).js_tial_live = js_tial_live(1:trial_onset(n)+recording_length-1);
                
                js_reach(trial_count).trigger = trial_onset(n);
                if any(reward(1:trial_onset(n)+recording_length-1))
                    js_reach(trial_count).reward_flag = 1;
                    js_reach(trial_count).reward_idx = find(reward(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length)==1);
                    reward_count = reward_count + 1;
                else
                    js_reach(trial_count).reward_flag = 0;
                end
            elseif length(x)-trial_onset(n)<recording_length
                js_reach(trial_count).x_traj = x(trial_onset(n)-buffer_length+1:end);
                js_reach(trial_count).y_traj = y(trial_onset(n)-buffer_length+1:end);
                js_reach(trial_count).js_tial_live = js_tial_live(trial_onset(n)-buffer_length+1:end);
                
                js_reach(trial_count).trigger = buffer_length;
                if any(reward(trial_onset(n)-buffer_length+1:end))
                    js_reach(trial_count).reward_flag = 1;
                    js_reach(trial_count).reward_idx = find(reward(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length)==1);
                    reward_count = reward_count + 1;
                else
                    js_reach(trial_count).reward_flag = 0;
                end
            else
                js_reach(trial_count).x_traj = x(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length);
                js_reach(trial_count).y_traj = y(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length);
                js_reach(trial_count).js_tial_live = js_tial_live(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length);
                js_reach(trial_count).trigger = buffer_length;
                if any(reward(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length))
                    js_reach(trial_count).reward_flag = 1;
                    js_reach(trial_count).reward_idx = find(reward(trial_onset(n)-buffer_length+1:trial_onset(n)+recording_length)==1);
                    reward_count = reward_count + 1;
                else
                    js_reach(trial_count).reward_flag = 0;
                end
            end
            
            time_trial = [1:length(js_reach(trial_count).x_traj)]/Fs;
%             figure(101)
%             plot(time_trial,sqrt(js_reach(trial_count).x_traj.^2+js_reach(trial_count).y_traj.^2),'LineWidth',2,'color',[45 49 66]/255)
%             hold on
%             yline(hold_threshold,'--','color','k','LineWidth',2)
%             yline(outer_threshold,'--','color','k','LineWidth',2)
%             yline(max_distance,'--','color','k','LineWidth',2)    
            
            trial_count = trial_count+1;
            
               
        end
    end
end
cd([data_folder mouse_ID '\' data_ID])
save('js_reach','js_reach')
cd('C:\Users\anaga\Documents\GitHub\Joystick-Analysis\Analysis_050422')
